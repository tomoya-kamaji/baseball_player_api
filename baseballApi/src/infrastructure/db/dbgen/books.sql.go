// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.0
// source: books.sql

package dbgen

import (
	"context"
	"database/sql"
	"strings"
)

const getBook = `-- name: GetBook :many
SELECT
   id, title, author, publisher, publication_year, genre, isbn
FROM
   books
WHERE
   id IN (/*SLICE:bookIds*/?)
`

func (q *Queries) GetBook(ctx context.Context, bookids []int32) ([]Book, error) {
	query := getBook
	var queryParams []interface{}
	if len(bookids) > 0 {
		for _, v := range bookids {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:bookIds*/?", strings.Repeat(",?", len(bookids))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:bookIds*/?", "NULL", 1)
	}
	rows, err := q.db.QueryContext(ctx, query, queryParams...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Book{}
	for rows.Next() {
		var i Book
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Author,
			&i.Publisher,
			&i.PublicationYear,
			&i.Genre,
			&i.Isbn,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBookByTitle = `-- name: GetBookByTitle :many
SELECT
   id, title, author, publisher, publication_year, genre, isbn
FROM
   books
WHERE
   title = ?
`

func (q *Queries) GetBookByTitle(ctx context.Context, title sql.NullString) ([]Book, error) {
	rows, err := q.db.QueryContext(ctx, getBookByTitle, title)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Book{}
	for rows.Next() {
		var i Book
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Author,
			&i.Publisher,
			&i.PublicationYear,
			&i.Genre,
			&i.Isbn,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
