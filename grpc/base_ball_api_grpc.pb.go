// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: grpc/proto/base_ball_api.proto

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BaseBallApi_FetchPlayer_FullMethodName  = "/BaseBallApi/FetchPlayer"
	BaseBallApi_CreatePlayer_FullMethodName = "/BaseBallApi/CreatePlayer"
	BaseBallApi_Crawler_FullMethodName      = "/BaseBallApi/Crawler"
)

// BaseBallApiClient is the client API for BaseBallApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BaseBallApiClient interface {
	FetchPlayer(ctx context.Context, in *FetchPlayerRequest, opts ...grpc.CallOption) (*FetchPlayerResponse, error)
	CreatePlayer(ctx context.Context, in *CreatePlayersRequest, opts ...grpc.CallOption) (*CreatePlayerResponse, error)
	Crawler(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
}

type baseBallApiClient struct {
	cc grpc.ClientConnInterface
}

func NewBaseBallApiClient(cc grpc.ClientConnInterface) BaseBallApiClient {
	return &baseBallApiClient{cc}
}

func (c *baseBallApiClient) FetchPlayer(ctx context.Context, in *FetchPlayerRequest, opts ...grpc.CallOption) (*FetchPlayerResponse, error) {
	out := new(FetchPlayerResponse)
	err := c.cc.Invoke(ctx, BaseBallApi_FetchPlayer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baseBallApiClient) CreatePlayer(ctx context.Context, in *CreatePlayersRequest, opts ...grpc.CallOption) (*CreatePlayerResponse, error) {
	out := new(CreatePlayerResponse)
	err := c.cc.Invoke(ctx, BaseBallApi_CreatePlayer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baseBallApiClient) Crawler(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, BaseBallApi_Crawler_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BaseBallApiServer is the server API for BaseBallApi service.
// All implementations must embed UnimplementedBaseBallApiServer
// for forward compatibility
type BaseBallApiServer interface {
	FetchPlayer(context.Context, *FetchPlayerRequest) (*FetchPlayerResponse, error)
	CreatePlayer(context.Context, *CreatePlayersRequest) (*CreatePlayerResponse, error)
	Crawler(context.Context, *Empty) (*Empty, error)
	mustEmbedUnimplementedBaseBallApiServer()
}

// UnimplementedBaseBallApiServer must be embedded to have forward compatible implementations.
type UnimplementedBaseBallApiServer struct {
}

func (UnimplementedBaseBallApiServer) FetchPlayer(context.Context, *FetchPlayerRequest) (*FetchPlayerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchPlayer not implemented")
}
func (UnimplementedBaseBallApiServer) CreatePlayer(context.Context, *CreatePlayersRequest) (*CreatePlayerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePlayer not implemented")
}
func (UnimplementedBaseBallApiServer) Crawler(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Crawler not implemented")
}
func (UnimplementedBaseBallApiServer) mustEmbedUnimplementedBaseBallApiServer() {}

// UnsafeBaseBallApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BaseBallApiServer will
// result in compilation errors.
type UnsafeBaseBallApiServer interface {
	mustEmbedUnimplementedBaseBallApiServer()
}

func RegisterBaseBallApiServer(s grpc.ServiceRegistrar, srv BaseBallApiServer) {
	s.RegisterService(&BaseBallApi_ServiceDesc, srv)
}

func _BaseBallApi_FetchPlayer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchPlayerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaseBallApiServer).FetchPlayer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BaseBallApi_FetchPlayer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaseBallApiServer).FetchPlayer(ctx, req.(*FetchPlayerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BaseBallApi_CreatePlayer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePlayersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaseBallApiServer).CreatePlayer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BaseBallApi_CreatePlayer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaseBallApiServer).CreatePlayer(ctx, req.(*CreatePlayersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BaseBallApi_Crawler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaseBallApiServer).Crawler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BaseBallApi_Crawler_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaseBallApiServer).Crawler(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// BaseBallApi_ServiceDesc is the grpc.ServiceDesc for BaseBallApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BaseBallApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "BaseBallApi",
	HandlerType: (*BaseBallApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FetchPlayer",
			Handler:    _BaseBallApi_FetchPlayer_Handler,
		},
		{
			MethodName: "CreatePlayer",
			Handler:    _BaseBallApi_CreatePlayer_Handler,
		},
		{
			MethodName: "Crawler",
			Handler:    _BaseBallApi_Crawler_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc/proto/base_ball_api.proto",
}
