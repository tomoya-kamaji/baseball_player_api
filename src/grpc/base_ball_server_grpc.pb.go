// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: proto/base_ball_server.proto

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BaseBallServer_SelectPlayers_FullMethodName = "/BaseBallServer/SelectPlayers"
)

// BaseBallServerClient is the client API for BaseBallServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BaseBallServerClient interface {
	SelectPlayers(ctx context.Context, in *SelectPlayersRequest, opts ...grpc.CallOption) (*SelectPlayersReply, error)
}

type baseBallServerClient struct {
	cc grpc.ClientConnInterface
}

func NewBaseBallServerClient(cc grpc.ClientConnInterface) BaseBallServerClient {
	return &baseBallServerClient{cc}
}

func (c *baseBallServerClient) SelectPlayers(ctx context.Context, in *SelectPlayersRequest, opts ...grpc.CallOption) (*SelectPlayersReply, error) {
	out := new(SelectPlayersReply)
	err := c.cc.Invoke(ctx, BaseBallServer_SelectPlayers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BaseBallServerServer is the server API for BaseBallServer service.
// All implementations should embed UnimplementedBaseBallServerServer
// for forward compatibility
type BaseBallServerServer interface {
	SelectPlayers(context.Context, *SelectPlayersRequest) (*SelectPlayersReply, error)
}

// UnimplementedBaseBallServerServer should be embedded to have forward compatible implementations.
type UnimplementedBaseBallServerServer struct {
}

func (UnimplementedBaseBallServerServer) SelectPlayers(context.Context, *SelectPlayersRequest) (*SelectPlayersReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelectPlayers not implemented")
}

// UnsafeBaseBallServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BaseBallServerServer will
// result in compilation errors.
type UnsafeBaseBallServerServer interface {
	mustEmbedUnimplementedBaseBallServerServer()
}

func RegisterBaseBallServerServer(s grpc.ServiceRegistrar, srv BaseBallServerServer) {
	s.RegisterService(&BaseBallServer_ServiceDesc, srv)
}

func _BaseBallServer_SelectPlayers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelectPlayersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaseBallServerServer).SelectPlayers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BaseBallServer_SelectPlayers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaseBallServerServer).SelectPlayers(ctx, req.(*SelectPlayersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BaseBallServer_ServiceDesc is the grpc.ServiceDesc for BaseBallServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BaseBallServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "BaseBallServer",
	HandlerType: (*BaseBallServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SelectPlayers",
			Handler:    _BaseBallServer_SelectPlayers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/base_ball_server.proto",
}
